#include "ExperimentalLaser.hpp"
#include "ExperimentParams.hpp"

#include <iostream>

namespace HHG::Laser {
    ExperimentalLaser::ExperimentalLaser(h_float _photon_energy, h_float _E_0, h_float model_ratio, h_float _second_laser_shift, Active _active_laser/* = Active::Both */)
        : Laser(_photon_energy * exp_photon_energy, 
            _E_0, 
            model_ratio, 
            0, 
            unified_t_max * (_photon_energy * exp_photon_energy / (1e12 * hbar)), //(laser_end + std::abs(_second_laser_shift)) * (_photon_energy * exp_photon_energy / (1e12 * hbar)), 
            true), 
        second_laser_shift{_second_laser_shift * (_photon_energy * exp_photon_energy / (1e12 * hbar))},
        lattice_constant{model_ratio},
        active_laser{_active_laser}
    {
        this->compute_spline();
    }

    constexpr int begin_zero = 8;
    constexpr int zero_buff = 8;
    typedef std::array<h_float, N_experiment + N_extra + zero_buff + begin_zero> A_arr;

    A_arr vector_potential(const std::array<h_float, N_experiment>& electric_field, h_float dt) 
    {
        A_arr ret;
        for (int i = 0; i < begin_zero; ++i) {
            ret[i] = h_float{};
        }
        ret[begin_zero] = -electric_field[0] * dt;
        for (size_t i = 1U; i < N_experiment; ++i) {
             // A = - c int_0^t E(t') dt'. The factor c cancels in the Peierls substitution
            ret[i + begin_zero] = ret[i + begin_zero - 1] - electric_field[i] * dt;
        }

        const h_float prime = -electric_field.back();
        const h_float primeprime = 0.5 * (electric_field[N_experiment - 2] - electric_field.back()) / dt;

        const h_float __end = (N_extra - 1) * dt;
        const h_float third = -4 * (primeprime / (2 * __end) + (3 * prime) / (4 * __end * __end) + ret[N_experiment + begin_zero - 1] / (__end * __end * __end));
        const h_float fourth = - 0.25 * (3 * third / __end + 2 * primeprime / (__end * __end) + prime / (__end * __end * __end));

        auto pol = [&](h_float t) {
            return ret[N_experiment + begin_zero - 1] + prime * t + primeprime * t*t + third * t*t*t + fourth * t*t*t*t;
        };

        for (int i = 1; i < N_extra; ++i) {
            ret[N_experiment + begin_zero - 1 + i] = pol(i * dt);
        }
        for (int i = ret.size() - begin_zero - 1; i < ret.size(); ++i) {
            ret[i] = h_float{};
        }
        return ret;
    }

    void ExperimentalLaser::compute_spline()
    {
        constexpr int N = A_arr().size();
        const h_float dt = this->photon_energy * (exp_dt / (1e12 * hbar)); // unitless
        const h_float unitless_laser_end = this->photon_energy * (laser_end / (1e12 * hbar));

        // Experimental data in MV/cm [measured]
        constexpr std::array<h_float, N_experiment> E_A = 
            /*{ 
                4.47783948e-03, 1.07730574e-02, 1.74643833e-02, 2.35351713e-02, 2.81424513e-02, 3.07361492e-02, 3.11150702e-02, 2.94233825e-02, 2.60949261e-02, 2.17543041e-02, 1.70878863e-02, 1.27058836e-02, 9.02527631e-03, 6.20628850e-03, 4.16653179e-03, 2.67563383e-03, 1.50445420e-03, 5.77616879e-04, 6.80248170e-05, 3.84878608e-04, 2.04140421e-03, 5.43428869e-03, 1.06067408e-02, 1.70843972e-02, 2.38585803e-02, 2.95471892e-02, 3.27040985e-02, 3.21944914e-02, 2.75259725e-02, 1.90343631e-02, 7.86607843e-03, -4.23935419e-03, -1.53045669e-02, -2.35098563e-02, -2.75292328e-02, -2.67359172e-02, -2.12518157e-02, -1.18598174e-02, 1.74422868e-04, 1.33192551e-02, 2.59930868e-02, 3.67594178e-02, 4.44935308e-02, 4.85140157e-02, 4.86629085e-02, 4.53088514e-02, 3.92499778e-02, 3.15135254e-02, 2.30838711e-02, 1.46262882e-02, 6.29241998e-03, -2.31848000e-03, -1.20129837e-02, -2.37061389e-02, -3.80674829e-02, -5.52338553e-02, -7.46952771e-02, -9.53985530e-02, -1.16028554e-01, -1.35352837e-01, -1.52483521e-01, -1.66938003e-01, -1.78459822e-01, -1.86662490e-01, -1.90640487e-01, -1.88716570e-01, -1.78449135e-01, -1.56923914e-01, -1.21242571e-01, -6.90476523e-02, 1.07417947e-03, 8.93858756e-02, 1.94937382e-01, 3.15481745e-01, 4.47176664e-01, 5.83971892e-01, 7.16786283e-01, 8.32822680e-01, 9.15547503e-01, 9.45867889e-01, 9.04811366e-01, 7.77570485e-01, 5.58227643e-01, 2.53999892e-01, -1.12370356e-01, -5.03269361e-01, -8.70496670e-01, -1.16285492e+00, -1.33573663e+00, -1.36063885e+00, -1.23226025e+00, -9.71186054e-01, -6.21110498e-01, -2.40865800e-01, 1.07126961e-01, 3.69377172e-01, 5.11866761e-01, 5.26103879e-01, 4.29291009e-01, 2.58705674e-01, 6.18570668e-02, -1.14988627e-01, -2.37008092e-01, -2.87314436e-01, -2.68420496e-01, -1.98755678e-01, -1.05620464e-01, -1.67960212e-02, 4.68146908e-02, 7.56531728e-02, 7.22107697e-02, 4.82519501e-02, 1.97897787e-02, 1.54983198e-03, 2.60178109e-03, 2.42931719e-02, 6.07995487e-02, 1.01784607e-01, 1.36092104e-01, 1.55214766e-01, 1.55513760e-01, 1.38677952e-01, 1.10520933e-01, 7.87142704e-02, 5.03040355e-02, 2.98078109e-02, 1.83953237e-02, 1.42432554e-02, 1.37710684e-02, 1.32286779e-02, 1.00734077e-02, 3.72456046e-03, -4.45644513e-03, -1.18438749e-02, -1.55769366e-02, -1.35706932e-02, -5.20113011e-03, 8.49691191e-03, 2.51114796e-02, 4.14730708e-02, 5.44042101e-02, 6.13981446e-02, 6.10853287e-02, 5.34265529e-02, 3.96429163e-02, 2.19384417e-02, 3.08925914e-03, -1.40269632e-02, -2.68943436e-02, -3.37534472e-02, -3.38704813e-02, -2.76339104e-02, -1.64528224e-02, -2.46632732e-03, 1.18844077e-02, 2.43328291e-02, 3.32060456e-02, 3.76908079e-02, 3.78899508e-02, 3.46690367e-02, 2.93487569e-02, 2.33362185e-02, 1.77962346e-02, 1.34413270e-02, 1.04759597e-02, 8.68236851e-03, 7.59806668e-03, 6.71875348e-03, 5.66641129e-03, 4.28444334e-03, 2.64932031e-03, 1.01156057e-03, -3.07554225e-04, -1.03353185e-03, -1.04336090e-03, -4.35343330e-04, 4.52694201e-04, 1.08743897e-03, 8.47489299e-04, -8.19238378e-04, -4.21906905e-03, -9.26319661e-03, -1.53963723e-02, -2.16431752e-02, -2.67827753e-02, -2.96238400e-02, -2.93138274e-02, -2.55956411e-02, -1.89297997e-02, -1.04334948e-02, -1.64037471e-03, 5.86009427e-03, 1.08060255e-02, 1.25627718e-02, 1.12570045e-02, 7.71323925e-03, 3.21895404e-03, -8.08489877e-04, -3.15843776e-03, -3.08120286e-03, -4.07248731e-04 
            };*/
            { 
                -2.55696e-3, 2.10912e-3, 6.31776e-3, 9.55008e-3, 12.92784e-3, 14.19168e-3, 14.73648e-3, 12.94512e-3, 10.848e-3, 7.81296e-3, 5.56224e-3, 2.75136e-3, 0.94992e-3, 0.90144e-3, -0.00576e-3, -0.47712e-3, 1.47744e-3, 3.53376e-3, 6.2232e-3, 9.19584e-3, 10.59264e-3, 11.9496e-3, 13.90368e-3, 14.79456e-3, 14.42928e-3, 14.69664e-3, 12.96336e-3, 12.09024e-3, 10.44288e-3, 9.5544e-3, 9.50688e-3, 9.324e-3, 9.44592e-3, 9.80448e-3, 10.42848e-3, 10.14624e-3, 10.71744e-3, 10.74144e-3, 11.29392e-3, 12.27216e-3, 14.484e-3, 15.33264e-3, 16.37376e-3, 17.77248e-3, 17.4864e-3, 17.02848e-3, 14.20224e-3, 10.47888e-3, 4.25232e-3, -2.6328e-3, -10.33536e-3, -18.71472e-3, -28.8456e-3, -39.21744e-3, -49.02864e-3, -63.51024e-3, -78.50592e-3, -95.61984e-3, -114.37488e-3, -137.49504e-3, -159.21216e-3, -179.00112e-3, -198.012e-3, -210.59136e-3, -220.03488e-3, -217.95456e-3, -207.36384e-3, -185.70384e-3, -150.52896e-3, -95.31168e-3, -25.4928e-3, 65.42256e-3, 174.52992e-3, 301.66368e-3, 452.8152e-3, 620.43168e-3, 764.65248e-3, 902.82144e-3, 986.56944e-3, 1036.5168e-3, 1023.91392e-3, 931.74576e-3, 728.73312e-3, 353.4624e-3, -51.29184e-3, -497.22672e-3, -1008.81456e-3, -1390.3368e-3, -1563.96912e-3, -1578.59424e-3, -1425.19296e-3, -1124.78544e-3, -653.9136e-3, -137.19216e-3, 241.85616e-3, 541.9464e-3, 690.40512e-3, 681.43872e-3, 542.65248e-3, 317.91408e-3, 54.77472e-3, -186.63648e-3, -336.83328e-3, -388.92336e-3, -341.38896e-3, -243.9744e-3, -100.69536e-3, 20.13264e-3, 105.09984e-3, 134.44896e-3, 106.96272e-3, 60.70128e-3, 6.39168e-3, -23.56848e-3, -18.42432e-3, 11.94816e-3, 66.47472e-3, 130.02624e-3, 183.82416e-3, 214.10976e-3, 217.644e-3, 190.53696e-3, 146.1816e-3, 93.20928e-3, 41.51232e-3, 7.55904e-3, -7.24464e-3, -10.84992e-3, -4.59792e-3, -3.02448e-3, -3.48192e-3, -14.8752e-3, -32.49744e-3, -53.08608e-3, -67.54848e-3, -68.22432e-3, -54.75168e-3, -28.3728e-3, 3.53904e-3, 38.86608e-3, 67.60512e-3, 84.57072e-3, 87.24864e-3, 72.96432e-3, 46.76688e-3, 12.67872e-3, -22.67856e-3, -54.4056e-3, -75.13104e-3, -84.07104e-3, -82.01712e-3, -68.90736e-3, -45.13728e-3, -15.16704e-3, 15.20496e-3, 41.75472e-3, 63.07248e-3, 73.20096e-3, 75.97104e-3, 68.9568e-3, 56.25696e-3, 39.71136e-3, 22.404e-3, 9.47136e-3, 1.56864e-3, -0.20832e-3, 1.5264e-3, 3.66528e-3, 4.70736e-3, 2.73552e-3, -4.04112e-3, -13.6104e-3, -22.5816e-3, -29.51664e-3, -30.87696e-3, -25.97952e-3, -15.42384e-3, -0.50544e-3, 11.41056e-3, 19.54464e-3, 22.33536e-3, 16.58208e-3, 4.84992e-3, -12.80976e-3, -30.85488e-3, -43.15872e-3, -50.3448e-3, -47.31744e-3, -37.52448e-3, -23.10048e-3, -7.1544e-3, 10.32384e-3, 21.94032e-3, 29.208e-3, 32.27232e-3, 33.51888e-3, 31.52064e-3, 29.2632e-3, 26.72112e-3, 23.49840e-3, 17.39232e-3 
            };
        // Experimental data in MV/cm [measured]
        constexpr std::array<h_float, N_experiment> E_B = 
            /*{
                -4.26792835e-03, -3.69471999e-03, -2.21970235e-03, -3.72820880e-04, 1.35390502e-03, 2.61179291e-03, 3.24737404e-03, 3.29624984e-03, 2.92923326e-03, 2.37144828e-03, 1.81944221e-03, 1.37959738e-03, 1.04409066e-03, 7.09961428e-04, 2.34733522e-04, -4.88813426e-04, -1.46288314e-03, -2.54441548e-03, -3.45184213e-03, -3.82310064e-03, -3.31307040e-03, -1.70451427e-03, 1.00055589e-03, 4.53929749e-03, 8.41357346e-03, 1.19806337e-02, 1.45873245e-02, 1.57127836e-02, 1.50819847e-02, 1.27215954e-02, 8.94714460e-03, 4.29024225e-03, -6.10190864e-04, -5.12276718e-03, -8.71884478e-03, -1.10337664e-02, -1.18928216e-02, -1.13099016e-02, -9.46929082e-03, -6.69731064e-03, -3.42429633e-03, -1.33465012e-04, 2.70500293e-03, 4.70886875e-03, 5.65232501e-03, 5.50659769e-03, 4.43357454e-03, 2.72568446e-03, 7.04161055e-04, -1.39395600e-03, -3.50055830e-03, -5.73898002e-03, -8.37058150e-03, -1.16801582e-02, -1.58406237e-02, -2.08092337e-02, -2.62990856e-02, -3.18422551e-02, -3.69243378e-02, -4.11388420e-02, -4.42973918e-02, -4.64448975e-02, -4.77643119e-02, -4.84002513e-02, -4.82666290e-02, -4.69149358e-02, -4.35205448e-02, -3.70008091e-02, -2.62281818e-02, -1.02659087e-02, 1.14500452e-02, 3.90272781e-02, 7.21204368e-02, 1.09956909e-01, 1.51295439e-01, 1.94252975e-01, 2.36008340e-01, 2.72490374e-01, 2.98242727e-01, 3.06683747e-01, 2.90918343e-01, 2.45108384e-01, 1.66203557e-01, 5.56381597e-02, -7.95157876e-02, -2.26424114e-01, -3.67694552e-01, -4.83893218e-01, -5.56988487e-01, -5.74021004e-01, -5.30137731e-01, -4.30188903e-01, -2.88375048e-01, -1.25884355e-01, 3.30373425e-02, 1.65728899e-01, 2.55408980e-01, 2.94132494e-01, 2.83745241e-01, 2.34675915e-01, 1.62943847e-01, 8.61898653e-02, 1.97416899e-02, -2.63448187e-02, -4.86417082e-02, -4.99366656e-02, -3.73596419e-02, -1.97084999e-02, -4.77705526e-03, 2.60150778e-03, 1.36192254e-03, -6.19744341e-03, -1.57435752e-02, -2.26475354e-02, -2.35647680e-02, -1.74074901e-02, -5.49632883e-03, 9.05058701e-03, 2.24123297e-02, 3.12551199e-02, 3.36496072e-02, 2.94762755e-02, 2.02638226e-02, 8.58165053e-03, -2.77650324e-03, -1.15523136e-02, -1.65159021e-02, -1.75922795e-02, -1.56446376e-02, -1.20348568e-02, -8.12694432e-03, -4.88768690e-03, -2.68372985e-03, -1.29980201e-03, -1.34584279e-04, 1.51237420e-03, 4.15976854e-03, 7.94841954e-03, 1.25728646e-02, 1.73439213e-02, 2.13530376e-02, 2.36900353e-02, 2.36607109e-02, 2.09569563e-02, 1.57456363e-02, 8.65985678e-03, 6.94906384e-04, -6.97094827e-03, -1.31957131e-02, -1.70886353e-02, -1.81757760e-02, -1.64802882e-02, -1.24998807e-02, -7.08769309e-03, -1.26585411e-03, 3.98324772e-03, 7.89926356e-03, 1.00605731e-02, 1.04158534e-02, 9.23448590e-03, 6.99967850e-03, 4.27882835e-03, 1.60487465e-03, -6.07851285e-04, -2.10452401e-03, -2.79218420e-03, -2.71617769e-03, -2.02433969e-03, -9.28585721e-04, 3.31884477e-04, 1.52502252e-03, 2.45714071e-03, 2.99727595e-03, 3.08848331e-03, 2.74034250e-03, 2.00193471e-03, 9.22696701e-04, -4.83732576e-04, -2.25464538e-03, -4.45915336e-03, -7.14385353e-03, -1.02581060e-02, -1.35868477e-02, -1.67230295e-02, -1.91036115e-02, -2.01138113e-02, -1.92398776e-02, -1.62297085e-02, -1.12113791e-02, -4.72668091e-03, 2.34097280e-03, 8.93406261e-03, 1.40442037e-02, 1.69331338e-02, 1.72925780e-02, 1.53009929e-02, 1.15643468e-02, 6.96018140e-03, 2.42934942e-03, -1.22911982e-03, -3.50983234e-03
            };*/
            { 
                -2.89152e-3, -2.0304e-3, 0.06384e-3, 2.33424e-3, 4.02384e-3, 4.99344e-3, 4.95648e-3, 4.07136e-3, 2.6232e-3, 0.18384e-3, -1.07424e-3, -1.30944e-3, -3.4824e-3, -2.44992e-3, -3.16272e-3, -4.13904e-3, -3.62064e-3, -3.64944e-3, -2.40672e-3, -2.2488e-3, -0.94848e-3, -0.4896e-3, 1.61856e-3, 2.02896e-3, 3.22416e-3, 2.37504e-3, 2.2656e-3, 2.60688e-3, 1.66128e-3, 1.31856e-3, 1.13136e-3, 2.076e-3, 3.10464e-3, 3.78624e-3, 3.88464e-3, 4.29696e-3, 2.03184e-3, 1.17504e-3, -1.39296e-3, -2.99136e-3, -2.91072e-3, -2.77056e-3, -2.19456e-3, -0.33168e-3, 1.71264e-3, 2.93904e-3, 3.15072e-3, 2.71968e-3, 0.82608e-3, -1.53504e-3, -3.80208e-3, -7.18128e-3, -10.90176e-3, -14.62752e-3, -16.93536e-3, -20.98656e-3, -25.18032e-3, -29.35344e-3, -33.63696e-3, -40.9176e-3, -46.9464e-3, -52.05312e-3, -57.47424e-3, -61.1784e-3, -62.55936e-3, -61.89072e-3, -58.7088e-3, -49.87632e-3, -39.12816e-3, -21.95664e-3, 0.3288e-3, 32.1336e-3, 65.65056e-3, 107.80848e-3, 155.69184e-3, 206.0256e-3, 250.992e-3, 299.1e-3, 329.27952e-3, 344.52528e-3, 334.83072e-3, 292.75824e-3, 216.2976e-3, 87.13968e-3, -60.76896e-3, -213.16272e-3, -381.44928e-3, -550.64592e-3, -668.63328e-3, -697.77456e-3, -614.68416e-3, -474.13776e-3, -295.02624e-3, -101.68176e-3, 77.6952e-3, 229.9536e-3, 325.01232e-3, 366.3264e-3, 347.13792e-3, 286.46496e-3, 190.91664e-3, 87.9312e-3, 3.15264e-3, -52.75632e-3, -73.94208e-3, -69.7128e-3, -44.42496e-3, -15.6192e-3, 9.04512e-3, 18.3912e-3, 11.7744e-3, -3.59952e-3, -24.15888e-3, -37.5696e-3, -40.3272e-3, -32.69184e-3, -14.71968e-3, 10.49088e-3, 31.34592e-3, 44.9976e-3, 49.40496e-3, 41.9376e-3, 26.91168e-3, 6.828e-3, -12.80208e-3, -27.65088e-3, -33.31008e-3, -33.5112e-3, -27.49104e-3, -20.3928e-3, -12.38784e-3, -7.29312e-3, -4.30176e-3, -4.9032e-3, -6.6192e-3, -5.38032e-3, -2.08416e-3, 4.74816e-3, 13.29168e-3, 24.12864e-3, 33.80832e-3, 39.65472e-3, 41.70384e-3, 37.39728e-3, 28.0104e-3, 14.1456e-3, -0.42528e-3, -14.8632e-3, -25.93872e-3, -32.73024e-3, -35.59632e-3, -33.16224e-3, -26.81424e-3, -15.35616e-3, -3.79344e-3, 7.71312e-3, 17.02512e-3, 20.75664e-3, 21.26784e-3, 18.18288e-3, 10.12464e-3, 1.44624e-3, -6.43872e-3, -11.79696e-3, -15.60672e-3, -15.07008e-3, -11.30304e-3, -6.09888e-3, -0.54e-3, 3.9984e-3, 5.51328e-3, 7.15632e-3, 5.95824e-3, 3.05376e-3, 0.89424e-3, -0.03504e-3, 1.70256e-3, 4.47936e-3, 3.20112e-3, 4.31088e-3, 3.30192e-3, -1.64208e-3, -6.57648e-3, -14.65632e-3, -21.73104e-3, -26.52048e-3, -28.66992e-3, -25.71216e-3, -19.25712e-3, -10.89264e-3, -2.78688e-3, 8.28048e-3, 14.63712e-3, 19.45968e-3, 20.5056e-3, 19.42896e-3, 17.1672e-3, 13.2096e-3, 9.61536e-3, 6.31152e-3, 2.26608e-3 
            };

        // Vector potential is given in [A/c] -> ((MV / cm) * ps) = 10^{-4} Vs/m
        // Multiplied by d*e/hbar for Peierls
        // combine e and V for eV and cancel with hbar in [meV s] gaining a factor 10^3
        // (A/c [MV ps/cm]) * 10^{-4} / (hbar [meV s] * 10^{-3}) * d [m]
        //      = (A/c [MV ps/cm]) / (hbar [meV s]) * d [m] * 10^{-1}
        Spline __spline_A(vector_potential(E_A, exp_dt).data(), N, t_begin, dt, h_float{}, h_float{});
        Spline __spline_B(vector_potential(E_B, exp_dt).data(), N, t_begin, dt, h_float{}, h_float{});

        auto add_laser = [this](const h_float A_A, const h_float A_B) -> h_float {
            if (this->active_laser == Active::Both)
                return A_A + A_B;
            if (this->active_laser == Active::A)
                return A_A;
            else
                return A_B;
        };

        const int N_temp = t_end / dt + 1;//N + int(second_laser_shift / dt) + 1;
        std::vector<h_float> __temp(N_temp + 1);
        for(int i = 0; i <= N_temp; ++i) {
            const h_float t = t_begin + (dt * i);
            //__temp[i] = __spline_A(t) + __spline_B(t);
            if (second_laser_shift >= 0) {
                const h_float __A = t <= unitless_laser_end ? __spline_A(t) : h_float{};
                const h_float __B = (t - second_laser_shift >= 0 && t - second_laser_shift <= unitless_laser_end) ? __spline_B(t - second_laser_shift) : h_float{};
                __temp[i] = (0.1 / HHG::hbar) * lattice_constant * add_laser(__A, __B);
                // See above for the reason of 0.1 / HHG::hbar
            }
            else {
                const h_float __A = (t + second_laser_shift >= 0 && t + second_laser_shift <= unitless_laser_end) ? __spline_A(t + second_laser_shift) : h_float{};
                const h_float __B = t <= unitless_laser_end ? __spline_B(t) : h_float{};
                __temp[i] = (0.1 / HHG::hbar) * lattice_constant * add_laser(__A, __B);
            }
        }
        std::cout << "Maximum shift = " 
            << std::ranges::max(__temp, [](const double lhs, const double rhs) {return std::abs(lhs) < std::abs(rhs);}) 
            << std::endl;
        this->laser_spline = Spline(__temp.data(), N_temp + 1, t_begin, dt, h_float{}, h_float{});
    }

    h_float ExperimentalLaser::envelope(h_float t) const {
        throw std::runtime_error("Envelope of the experimental pulse should never be called!");
    }
}