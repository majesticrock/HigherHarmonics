#pragma once

#include "../GlobalDefinitions.hpp"
#include <array>

namespace HHG::Laser {
    constexpr int n_gauss = 30;
    typedef std::array<h_float, n_gauss> g_array;

    /*
    * Weights and abscissa for the Gauss-Legendre quadrature on the interval [0, 1]
    * The weights are based on those for the interval [-1, 1] found in the boost library
    */
    constexpr g_array abscissa = {
        0.5 * (-5.14718425553176958e-02 + 1.),
        0.5 * (-1.53869913608583547e-01 + 1.),
        0.5 * (-2.54636926167889846e-01 + 1.),
        0.5 * (-3.52704725530878113e-01 + 1.),
        0.5 * (-4.47033769538089177e-01 + 1.),
        0.5 * (-5.36624148142019899e-01 + 1.),
        0.5 * (-6.20526182989242861e-01 + 1.),
        0.5 * (-6.97850494793315797e-01 + 1.),
        0.5 * (-7.67777432104826195e-01 + 1.),
        0.5 * (-8.29565762382768397e-01 + 1.),
        0.5 * (-8.82560535792052682e-01 + 1.),
        0.5 * (-9.26200047429274326e-01 + 1.),
        0.5 * (-9.60021864968307512e-01 + 1.),
        0.5 * (-9.83668123279747210e-01 + 1.),
        0.5 * (-9.96893484074649540e-01 + 1.),

        0.5 * (5.14718425553176958e-02 + 1.),
        0.5 * (1.53869913608583547e-01 + 1.),
        0.5 * (2.54636926167889846e-01 + 1.),
        0.5 * (3.52704725530878113e-01 + 1.),
        0.5 * (4.47033769538089177e-01 + 1.),
        0.5 * (5.36624148142019899e-01 + 1.),
        0.5 * (6.20526182989242861e-01 + 1.),
        0.5 * (6.97850494793315797e-01 + 1.),
        0.5 * (7.67777432104826195e-01 + 1.),
        0.5 * (8.29565762382768397e-01 + 1.),
        0.5 * (8.82560535792052682e-01 + 1.),
        0.5 * (9.26200047429274326e-01 + 1.),
        0.5 * (9.60021864968307512e-01 + 1.),
        0.5 * (9.83668123279747210e-01 + 1.),
        0.5 * (9.96893484074649540e-01 + 1.),
    };

    constexpr g_array weights = {
        0.5 * 1.02852652893558840e-01,
        0.5 * 1.01762389748405505e-01,
        0.5 * 9.95934205867952671e-02,
        0.5 * 9.63687371746442596e-02,
        0.5 * 9.21225222377861287e-02,
        0.5 * 8.68997872010829798e-02,
        0.5 * 8.07558952294202154e-02,
        0.5 * 7.37559747377052063e-02,
        0.5 * 6.59742298821804951e-02,
        0.5 * 5.74931562176190665e-02,
        0.5 * 4.84026728305940529e-02,
        0.5 * 3.87991925696270496e-02,
        0.5 * 2.87847078833233693e-02,
        0.5 * 1.84664683110909591e-02,
        0.5 * 7.96819249616660562e-03,

        0.5 * 1.02852652893558840e-01,
        0.5 * 1.01762389748405505e-01,
        0.5 * 9.95934205867952671e-02,
        0.5 * 9.63687371746442596e-02,
        0.5 * 9.21225222377861287e-02,
        0.5 * 8.68997872010829798e-02,
        0.5 * 8.07558952294202154e-02,
        0.5 * 7.37559747377052063e-02,
        0.5 * 6.59742298821804951e-02,
        0.5 * 5.74931562176190665e-02,
        0.5 * 4.84026728305940529e-02,
        0.5 * 3.87991925696270496e-02,
        0.5 * 2.87847078833233693e-02,
        0.5 * 1.84664683110909591e-02,
        0.5 * 7.96819249616660562e-03,
    };

    constexpr g_array compute_legendre_2() {
        g_array legendre{};
        for (int i = 0; i < n_gauss; ++i) {
            legendre[i] = 2. * abscissa[i] - 1.;
        }
        return legendre;
    }
    constexpr g_array compute_legendre_3() {
        g_array legendre{};
        for (int i = 0; i < n_gauss; ++i) {
            legendre[i] = 6. * abscissa[i] * (abscissa[i] - 1.) + 1.;
        }
        return legendre;
    }
    constexpr g_array compute_legendre_4() {
        g_array legendre{};
        for (int i = 0; i < n_gauss; ++i) {
            legendre[i] = 20. * abscissa[i] * abscissa[i] * abscissa[i] - 30. * abscissa[i] * abscissa[i] + 12. * abscissa[i] + 1.;
        }
        return legendre;
    }

    constexpr g_array legendre_2 = compute_legendre_2();
    constexpr g_array legendre_3 = compute_legendre_3();
    constexpr g_array legendre_4 = compute_legendre_4();
}